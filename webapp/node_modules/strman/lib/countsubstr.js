'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _indexof = require('./indexof');

var _indexof2 = _interopRequireDefault(_indexof);

var _case = require('./lib/case');

var _case2 = _interopRequireDefault(_case);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var countSubstr = function countSubstr(value, substr) {
  var allowOverlapping = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var count = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

  var currentPosition = (0, _indexof2.default)(value, substr, position);
  if (currentPosition === -1) {
    return count;
  }
  if (!allowOverlapping) {
    currentPosition += substr.length - 1;
  }
  return countSubstr(value, substr, allowOverlapping, currentPosition + 1, count + 1);
};

/**
 * @module countSubstr
 * @description
 * Count the number of times substr appears in value
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the countSubstr function
 * ```sh
 * yarn add strman.countsubstr
 * ```
 * ## Usage
 * ```javascript
 * import { countSubstr } from 'strman'
 * // OR
 * import countSubstr from 'strman.countsubstr'
 * ```
 * @param {String} value The input string
 * @param {String} substr The substring to look for
 * @param {Boolean} [caseSensitive=true] Use case (in-)sensitive matching
 * @param {Boolean} [allowOverlapping=false] Allow overlapping substrings to be counted
 * @example
 * const title = 'Daniel Leite'
 * const substr = 'Leite'
 * countSubstr(title, substr)
 * // => 1
 * @returns {Number} The number of matches
 */

exports.default = function (value, substr) {
  var caseSensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var allowOverlapping = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  return countSubstr((0, _case2.default)(value, caseSensitive), (0, _case2.default)(substr, caseSensitive), allowOverlapping);
};