'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _case = require('./lib/case');

var _case2 = _interopRequireDefault(_case);

var _indexof = require('./indexof');

var _indexof2 = _interopRequireDefault(_indexof);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isInteger = function isInteger(value) {
  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
};

var getPosition = function getPosition(value, search, position) {
  if (!isInteger(position) || position > value.length) {
    return value.length - search.length;
  }
  return position - search.length;
};

/**
 * @module endsWith
 * @description
 * Test if `value` ends with `search`
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the endsWith function
 * ```sh
 * yarn add strman.endswith
 * ```
 * ## Usage
 * ```javascript
 * import { endsWith } from 'strman'
 * // OR
 * import endsWith from 'strman.endswith'
 * ```
 * @param {String} value The input string
 * @param {String} search The string to search for
 * @param {Number} [position] The start position/index within `value` to start searching
 * @param {Boolean} [caseSensitive=true] Use case (in-)sensitive matching
 * @example
 * const value = 'Daniel Leite'
 * const search = 'Leite'
 * endsWith(value, search)
 * // => true
 * @returns {Boolean} True if `input` ends with `search`
 */

exports.default = function (value, search) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var caseSensitive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  var newPosition = getPosition(value, search, position);
  var lastIndex = (0, _indexof2.default)((0, _case2.default)(value, caseSensitive), (0, _case2.default)(search, caseSensitive), newPosition);
  return lastIndex !== -1 && lastIndex === newPosition;
};