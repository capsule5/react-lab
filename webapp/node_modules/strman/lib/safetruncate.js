'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _append2 = require('./append');

var _append3 = _interopRequireDefault(_append2);

var _lastindexof = require('./lastindexof');

var _lastindexof2 = _interopRequireDefault(_lastindexof);

var _indexof = require('./indexof');

var _indexof2 = _interopRequireDefault(_indexof);

var _substr = require('./substr');

var _substr2 = _interopRequireDefault(_substr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @module safeTruncate
 * @description
 * Truncate the string securely, not cutting a word in half. It always returns the last full word.
 * ## Install
 * Install all functions of strman
 * ```sh
 * yarn add strman
 * ```
 * or just the safeTruncate function
 * ```sh
 * yarn add strman.safetruncate
 * ```
 * ## Usage
 * ```javascript
 * import { safeTruncate } from 'strman'
 * // OR
 * import safeTruncate from 'strman.safetruncate'
 * ```
 * @param {String} value Value will be truncated securely.
 * @param {Number} length Max size of the returned string.
 * @param {String} [append = ''] Value that will be added to the end of the return string.
 * @example
 * const title = 'A Javascript string manipulation library.'
 * safeTruncate(title, 15, '...');
 * // => 'A Javascript...'
 * @returns {String}  String truncated safely.
 */
exports.default = function (value, length) {
  var append = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  var truncated = '';

  if (length === 0) {
    return '';
  }

  if (length >= value.length) {
    return value;
  }

  var newLength = length - append.length;
  truncated = (0, _substr2.default)(value, 0, newLength);

  var position = (0, _indexof2.default)(value, ' ', newLength - 1);

  if (position !== newLength) {
    var lastPos = (0, _lastindexof2.default)(truncated, ' ');
    truncated = (0, _substr2.default)(truncated, 0, lastPos);
  }

  return (0, _append3.default)(truncated, append);
};